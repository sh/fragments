// Generated by CoffeeScript 1.9.2
var _, application, fs, hinoki, init, loadFactories, middleware, namespaceResolver, path, request, sourcesToFactories, toSources;

path = require('path');

fs = require('fs');

hinoki = require('hinoki');

_ = require('lodash');

loadFactories = function(arg1, arg2) {
  var exp, ext, filenames, filepath, object, stat;
  if (arg2 != null) {
    object = arg1;
    filepath = arg2;
  } else {
    object = {};
    filepath = arg1;
  }
  if ('string' !== typeof filepath) {
    throw new Error("`filepath` argument must be a string but is type = `" + (typeof filepath) + "` value = `" + filepath + "`");
  }
  if ('object' !== typeof object) {
    throw new Error("`object` argument must be a string but is type = `" + (typeof object) + "` value = `" + object + "`");
  }
  stat = fs.statSync(filepath);
  if (stat.isFile()) {
    ext = path.extname(filepath);
    if (ext !== '.js' && ext !== '.coffee') {
      return;
    }
    if (ext === '.coffee') {
      require('coffee-script/register');
    }
    exp = require(filepath);
    Object.keys(exp).map(function(key) {
      if ('function' !== typeof exp[key]) {
        throw new Error('export is not a function: ' + key + ' in :' + filepath);
      }
      if (object[key] != null) {
        throw new Error('duplicate export: ' + key + ' in: ' + filepath + '. first was in: ' + object[key].$file);
      }
      object[key] = exp[key];
      return object[key].$file = filepath;
    });
  } else if (stat.isDirectory()) {
    filenames = fs.readdirSync(filepath);
    filenames.forEach(function(filename) {
      return loadFactories(object, path.join(filepath, filename));
    });
  }
  return object;
};

namespaceResolver = function(name, lifetime, inner) {
  var result;
  result = inner(name);
  if (result != null) {
    return result;
  } else {
    return inner('fragments_' + name);
  }
};

toSources = function(value) {
  if (value == null) {
    return [];
  } else if (Array.isArray(value)) {
    return _.flatten(value);
  } else {
    return [value];
  }
};

sourcesToFactories = function(sources, overrideWarnings) {
  var reducer;
  reducer = function(existingFactories, value) {
    var additionalFactories;
    additionalFactories = (function() {
      if ('string' === typeof value) {
        return loadFactories(value);
      } else if ('object' === typeof value) {
        return value;
      } else {
        throw new Error('source must be a filename, directory name or an object');
      }
    })();
    _.each(additionalFactories, function(value, key) {
      if ((overrideWarnings != null) && (existingFactories[key] != null)) {
        overrideWarnings(key, existingFactories[key], value);
      }
      return existingFactories[key] = value;
    });
    return existingFactories;
  };
  return sources.reduce(reducer, {});
};

init = loadFactories(__dirname + '/init');

application = loadFactories(__dirname + '/application');

request = loadFactories(__dirname + '/request');

middleware = loadFactories(__dirname + '/middleware');

_.each(init, function(f) {
  return f.$source = 'fragments.init';
});

_.each(application, function(f) {
  return f.$source = 'fragments.application';
});

_.each(request, function(f) {
  return f.$source = 'fragments.request';
});

_.each(middleware, function(f) {
  return f.$source = 'fragments.middleware';
});

module.exports = function(options) {
  var InitLifetime, factories, result, sources;
  if (options == null) {
    options = {};
  }
  sources = {
    init: toSources(options.init),
    application: toSources(options.application),
    request: toSources(options.request),
    middleware: toSources(options.middleware)
  };
  sources.init.unshift(init);
  sources.application.unshift(application);
  sources.request.unshift(request);
  sources.middleware.unshift(middleware);
  factories = _.mapValues(sources, function(source) {
    return sourcesToFactories(source, options.overrideWarnings);
  });
  if (typeof shadowWarnings !== "undefined" && shadowWarnings !== null) {
    _.each(factories.request, function(value, key) {
      if (factories.process[key] != null) {
        return shadowWarnings(key, factories.process[key], value);
      }
    });
    _.each(factories.middleware, function(value, key) {
      if (factories.request[key] != null) {
        shadowWarnings(key, factories.request[key], value);
      }
      if (factories.process[key] != null) {
        return shadowWarnings(key, factories.process[key], value);
      }
    });
  }
  InitLifetime = function() {
    this.values = {
      applicationFactories: factories.application,
      requestFactories: factories.request,
      middlewareFactories: factories.middleware,
      namespaceResolver: namespaceResolver
    };
    return this;
  };
  InitLifetime.prototype.factories = factories.init;
  result = function(factory) {
    var initLifetime;
    initLifetime = new InitLifetime;
    return hinoki(initLifetime, 'applicationLifetime').then(function(applicationLifetime) {
      return hinoki(applicationLifetime, 'fragments_APPLICATION');
    }).then(function(APPLICATION) {
      return APPLICATION(factory);
    });
  };
  result.runCommand = function(args) {
    var initLifetime;
    if (args == null) {
      args = process.argv.slice(2);
    }
    initLifetime = new InitLifetime;
    return hinoki(initLifetime, 'applicationLifetime').then(function(applicationLifetime) {
      return hinoki(applicationLifetime, 'fragments_runCommand');
    }).then(function(runCommand) {
      return runCommand.apply(null, args);
    });
  };
  return result;
};
