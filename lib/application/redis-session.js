// Generated by CoffeeScript 1.9.1
module.exports.fragments_redisClient = function(fragments_Promise, fragments_url, fragments_redis, fragments_console, fragments_config_redisUrl, fragments_config_redisDatabase, fragments_onShutdown) {
  var parsedRedisURL, redisClient, redisHost, redisPassword, redisPort;
  parsedRedisURL = fragments_url.parse(fragments_config_redisUrl);
  redisPort = parsedRedisURL.port;
  redisHost = parsedRedisURL.hostname;
  if (parsedRedisURL.auth != null) {
    redisPassword = parsedRedisURL.auth.split(':')[1];
  }
  redisClient = fragments_redis.createClient(redisPort, redisHost);
  if (redisPassword != null) {
    redisClient.auth(redisPassword);
  }
  redisClient.select(fragments_config_redisDatabase);
  fragments_onShutdown('redis', function() {
    fragments_console.log('shutting down redis by calling redisClient.end()');
    return new fragments_Promise(function(resolve, reject) {
      redisClient.on('end', function() {
        fragments_console.log('redis client has ended');
        return resolve();
      });
      return redisClient.quit();
    });
  });
  return redisClient;
};

module.exports.fragments_RedisStore = function(fragments_expressSession, fragments_connectRedis) {
  return fragments_connectRedis(fragments_expressSession);
};

module.exports.fragments_redisSessionStore = function(fragments_RedisStore, fragments_redisClient, fragments_config_redisSessionStorePrefix) {
  return new fragments_RedisStore({
    client: fragments_redisClient,
    prefix: fragments_config_redisSessionStorePrefix
  });
};

module.exports.fragments_sessionMiddleware = function(fragments_expressSession, fragments_config_sessionSecret, fragments_redisSessionStore, fragments_uuid) {
  return fragments_expressSession({
    secret: fragments_config_sessionSecret,
    store: fragments_redisSessionStore,
    genid: function() {
      return fragments_uuid.v4();
    },
    saveUninitialized: true,
    resave: false,
    cookie: {
      httpOnly: true
    }
  });
};
