// Generated by CoffeeScript 1.9.2
var slice = [].slice;

module.exports.fragments_commandPrefix = function() {
  return 'command_';
};

module.exports.fragments_getCommandNamesFromLifetime = function(fragments_helfer, fragments_commandPrefix) {
  return function(lifetime) {
    return Object.keys(lifetime.factories).filter(function(x) {
      return x.indexOf(fragments_commandPrefix) === 0;
    }).map(function(x) {
      return x.slice(fragments_commandPrefix.length);
    }).map(fragments_helfer.camelSnakeToHyphenColon);
  };
};

module.exports.fragments_commandNameToFactoryPropertyName = function(fragments_helfer, fragments_commandPrefix) {
  return function(name) {
    return fragments_commandPrefix + fragments_helfer.hyphenColonToCamelSnake(name);
  };
};

module.exports.fragments_getCommandInLifetime = function(fragments_Promise, fragments_hinoki, fragments_commandNameToFactoryPropertyName, fragments_source) {
  return function(lifetime, commandName) {
    var commandFactory, commandKey;
    if (commandName == null) {
      commandName = 'help';
    }
    commandName = commandName.toLowerCase();
    commandKey = fragments_commandNameToFactoryPropertyName(commandName);
    commandFactory = fragments_source(commandKey);
    if (commandFactory == null) {
      return;
    }
    return function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return fragments_hinoki(fragments_source, lifetime, commandKey).then(function(commandInstance) {
        return commandInstance.apply(null, args);
      });
    };
  };
};

module.exports.fragments_runCommand = function(fragments_getCommandInLifetime, fragments_applicationLifetime) {
  return function() {
    var args, command, commandName;
    commandName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    command = fragments_getCommandInLifetime(fragments_applicationLifetime, commandName);
    if (command != null) {
      return command.apply(null, args);
    } else {
      throw new Error("no such command: " + commandName);
    }
  };
};

module.exports.fragments_getCommandHelpLinesFromLifetime = function(fragments_getCommandNamesFromLifetime, fragments_commandNameToFactoryPropertyName, fragments_isjs, fragments_lodash) {
  return function() {
    var _, args, commandNames, lifetime, prefix;
    lifetime = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    _ = fragments_lodash;
    commandNames = fragments_getCommandNamesFromLifetime(lifetime);
    if (args.length !== 0) {
      prefix = args.join(':');
      commandNames = _.filter(commandNames, function(name) {
        return fragments_isjs.startWith(name, prefix);
      });
    }
    commandNames = _.sortBy(commandNames);
    return commandNames.map(function(name) {
      var docstring, key, line;
      key = fragments_commandNameToFactoryPropertyName(name);
      line = name;
      docstring = lifetime.factories[key].$help;
      if (docstring != null) {
        line += ' ' + docstring;
      }
      return line;
    });
  };
};

module.exports.command_help = function(fragments_getCommandHelpLinesFromLifetime, fragments_applicationLifetime) {
  return function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return fragments_getCommandHelpLinesFromLifetime.apply(null, [fragments_applicationLifetime].concat(slice.call(args))).forEach(function(line) {
      return console.log(line);
    });
  };
};

module.exports.command_help.$help = '[namespace-prefixes...] display available commands';

module.exports.command_serve = function(fragments_APPLICATION) {
  return function(serverCallbackName) {
    var factory;
    if (serverCallbackName == null) {
      serverCallbackName = 'server';
    }
    factory = function(fragments_Promise, fragments_http, fragments_onShutdown, fragments_shutdownBefore, fragments_console, fragments_config_port, fragments_config_baseUrl, serverCallback) {
      return new fragments_Promise(function(resolve, reject) {
        var server;
        server = fragments_http.createServer(serverCallback);
        server.on('listening', function() {
          fragments_onShutdown('server', function() {
            console.log('shutting down server by calling server.close()');
            return fragments_Promise.promisify(server.close, server)();
          });
          fragments_shutdownBefore('postgres', 'server');
          fragments_shutdownBefore('redis', 'server');
          fragments_console.log("go visit " + fragments_config_baseUrl);
          fragments_console.log('OK');
          return resolve();
        });
        server.on('error', reject);
        return server.listen(fragments_config_port);
      });
    };
    factory.__inject = ['fragments_Promise', 'fragments_http', 'fragments_onShutdown', 'fragments_shutdownBefore', 'fragments_console', 'fragments_config_port', 'fragments_config_baseUrl', serverCallbackName];
    return fragments_APPLICATION(factory);
  };
};

module.exports.command_serve.$help = "[server-callback-name (default: 'server')] - start a server with server-callback-name as callback";

module.exports.command_info = function(fragments_APPLICATION) {
  return fragments_APPLICATION(function(fragments_console) {
    return function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      fragments_console.log('TODO');
      return fragments_console.log('OK');
    };
  });
};
