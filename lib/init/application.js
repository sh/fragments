// Generated by CoffeeScript 1.9.1
module.exports.applicationLifetime = function(ApplicationLifetime) {
  return new ApplicationLifetime;
};

module.exports.ApplicationLifetime = function(applicationFactories, requestFactories, middlewareFactories, tracingResolver, forge, namespaceResolver, aliasResolver) {
  var ApplicationLifetime;
  ApplicationLifetime = function() {
    this.values = {
      fragments_applicationLifetime: this,
      fragments_applicationFactories: applicationFactories,
      fragments_requestFactories: requestFactories,
      fragments_middlewareFactories: middlewareFactories,
      fragments_tracingResolver: tracingResolver,
      fragments_namespaceResolver: namespaceResolver,
      fragments_aliasResolver: aliasResolver
    };
    return this;
  };
  ApplicationLifetime.prototype.factories = applicationFactories;
  ApplicationLifetime.prototype.resolvers = [tracingResolver, forge.newTableResolver(), forge.newTableObjectResolver(), forge.newDataFirstResolver(), forge.newDataSelectResolver(), forge.newDataInsertResolver(), forge.newDataUpdateResolver(), forge.newDataDeleteResolver(), namespaceResolver, aliasResolver, forge.newEnvResolver()];
  return ApplicationLifetime;
};

module.exports.namesToTrace = function() {
  return [];
};

module.exports.tracingResolver = function(namesToTrace, trace) {
  return trace.newTracingResolver(namesToTrace);
};

module.exports.aliases = function() {
  return {
    fragments_config_port: 'envIntPort',
    fragments_config_baseUrl: 'envStringBaseUrl',
    fragments_config_sessionSecret: 'envStringSessionSecret',
    fragments_config_jwtSigningSecret: 'envStringJwtSigningSecret',
    fragments_config_jwtEncryptionPassword: 'envStringJwtEncryptionPassword',
    fragments_config_redisSessionStorePrefix: 'envStringRedisSessionStorePrefix',
    fragments_config_redisUrl: 'envStringRedisUrl',
    fragments_config_redisDatabase: 'envIntRedisDatabase',
    fragments_config_migrationPath: 'envStringMigrationPath',
    fragments_config_databaseUrl: 'envStringDatabaseUrl',
    fragments_config_postgresDatabase: 'envStringPostgresDatabase',
    fragments_config_postgresPoolSize: 'envStringPostgresPoolSize',
    fragments_config_bcryptCost: 'envIntBcryptCost',
    fragments_config_staticPath: 'envStringStaticPath'
  };
};

module.exports.aliasResolver = function(forge, aliases) {
  return forge.newAliasResolver(aliases);
};

module.exports.forge = function() {
  return require('fragments-forge');
};

module.exports.trace = function() {
  return require('hinoki-trace');
};
